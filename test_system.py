#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã Qwen2.5-0.5B –±–µ–∑ fallback
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –ø–æ–º–æ–≥–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
"""

import sys
import traceback
import logging
import subprocess
import os
import time
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    tests = [
        ("torch", "PyTorch"),
        ("transformers", "Transformers"),
        ("fastapi", "FastAPI"),
        ("gradio", "Gradio"),
        ("requests", "Requests")
    ]
    
    results = {}
    for module, name in tests:
        try:
            exec(f"import {module}")
            version = eval(f"{module}.__version__")
            results[name] = {"status": "‚úÖ", "version": version}
            logger.info(f"‚úÖ {name}: {version}")
        except Exception as e:
            results[name] = {"status": "‚ùå", "error": str(e)}
            logger.error(f"‚ùå {name}: {str(e)}")
    
    return results

def test_torch_setup():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PyTorch"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PyTorch...")
    
    try:
        import torch
        logger.info(f"üì¶ PyTorch –≤–µ—Ä—Å–∏—è: {torch.__version__}")
        logger.info(f"üîß CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.is_available()}")
        
        if torch.cuda.is_available():
            logger.info(f"üéÆ GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {torch.cuda.device_count()}")
            for i in range(torch.cuda.device_count()):
                logger.info(f"   - GPU {i}: {torch.cuda.get_device_name(i)}")
        else:
            logger.info("üíª –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ PyTorch: {str(e)}")
        return False

def test_model_loading():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ Qwen2.5-0.5B –±–µ–∑ fallback"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ Qwen2.5-0.5B...")
    
    try:
        from app.model import load_model
        
        logger.info("ü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)...")
        model, tokenizer = load_model()
        
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìä –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {model.device}")
        logger.info(f"üéØ –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {model.dtype}")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        test_input = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        inputs = tokenizer(test_input, return_tensors="pt", padding=True)
        
        import torch
        with torch.no_grad():
            outputs = model.generate(**inputs, max_new_tokens=20, do_sample=False, pad_token_id=tokenizer.eos_token_id)
        
        response = tokenizer.decode(outputs[0], skip_special_tokens=True)
        logger.info(f"ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {response}")
        logger.info("‚úÖ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
        logger.error(f"üìã –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
        return False

def test_api_start():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ API"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ API...")
    
    try:
        import uvicorn
        from app.main import app
        
        logger.info("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ API: {str(e)}")
        logger.error(f"üìã –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
        return False

def test_api_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É API"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...")
    
    api_url = "http://localhost:8000"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint...")
        response = requests.get(f"{api_url}/health", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            logger.info("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω!")
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {data.get('status')}")
            logger.info(f"üß† –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {data.get('model_loaded')}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ API
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API...")
            gen_response = requests.post(
                f"{api_url}/generate",
                json={
                    "text": "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç.",
                    "system_prompt": "–í—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."
                },
                timeout=30
            )
            
            if gen_response.status_code == 200:
                result = gen_response.json()
                logger.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ API —É—Å–ø–µ—à–Ω–∞!")
                logger.info(f"ü§ñ –û—Ç–≤–µ—Ç: {result['response'][:100]}...")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {gen_response.status_code}")
                return False
        else:
            logger.error(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        logger.warning("‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω)")
        logger.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ API: uvicorn app.main:app --host 0.0.0.0 --port 8000")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")
        return False

def test_ui_start():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ UI"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ UI...")
    
    try:
        import gradio as gr
        from app.ui import demo
        
        logger.info("‚úÖ Gradio UI –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ UI: {str(e)}")
        logger.error(f"üìã –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
        return False

def check_huggingface_auth():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ HuggingFace"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ HuggingFace...")
    
    try:
        result = subprocess.run(
            ["huggingface-cli", "whoami"], 
            capture_output=True, 
            text=True, 
            timeout=10
        )
        
        if result.returncode == 0:
            logger.info("‚úÖ HuggingFace –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {result.stdout.strip()}")
            return True
        else:
            logger.warning("‚ö†Ô∏è HuggingFace –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            logger.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: huggingface-cli login")
            return False
    except FileNotFoundError:
        logger.warning("‚ö†Ô∏è huggingface-cli –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ HuggingFace: {str(e)}")
        return False

def show_recommendations(results):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º"""
    logger.info("\n" + "="*50)
    logger.info("üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ")
    logger.info("="*50)
    
    if not results.get('hf_auth', False):
        logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é HuggingFace (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):")
        logger.info("   huggingface-cli login")
    
    if not results.get('model_loading', False):
        logger.info("üîß –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è:")
        logger.info("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        logger.info("   2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–∞–º—è—Ç–∏/–¥–∏—Å–∫–∞")
        logger.info("   3. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ HuggingFace")
    
    if not results.get('api_connection', False):
        logger.info("üîß –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:")
        logger.info("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ API —Å–µ—Ä–≤–µ—Ä:")
        logger.info("      uvicorn app.main:app --host 0.0.0.0 --port 8000")
        logger.info("   2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Docker:")
        logger.info("      docker-compose up --build")
    
    logger.info("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
    logger.info("   1. API: uvicorn app.main:app --host 0.0.0.0 --port 8000")
    logger.info("   2. UI: python app/ui.py")
    logger.info("   3. –ò–ª–∏ Docker: docker-compose up --build")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã Qwen2.5-0.5B (–±–µ–∑ fallback)")
    logger.info("="*60)
    
    results = {}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    import_results = test_imports()
    results['imports'] = import_results
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º PyTorch
    results['torch'] = test_torch_setup()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HuggingFace –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    results['hf_auth'] = check_huggingface_auth()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    results['api'] = test_api_start()
    results['ui'] = test_ui_start()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)
    results['api_connection'] = test_api_connection()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    test_model = input("\n‚ùì –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏? (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è) [y/N]: ").lower().strip()
    if test_model == 'y':
        results['model_loading'] = test_model_loading()
    else:
        logger.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏")
        results['model_loading'] = None
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("\n" + "="*50)
    logger.info("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    logger.info("="*50)
    
    total_tests = 0
    passed_tests = 0
    
    for test_name, result in results.items():
        if test_name == 'imports':
            for lib_name, lib_result in result.items():
                total_tests += 1
                if lib_result['status'] == '‚úÖ':
                    passed_tests += 1
                    logger.info(f"‚úÖ {lib_name}: {lib_result.get('version', 'OK')}")
                else:
                    logger.info(f"‚ùå {lib_name}: {lib_result.get('error', '–û—à–∏–±–∫–∞')}")
        elif result is not None:
            total_tests += 1
            if result:
                passed_tests += 1
                logger.info(f"‚úÖ {test_name}")
            else:
                logger.info(f"‚ùå {test_name}")
    
    logger.info(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed_tests == total_tests:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ –±–µ–∑ fallback!")
    else:
        show_recommendations(results)

if __name__ == "__main__":
    main() 