import gradio as gr
import requests
import time
import os
import traceback
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# API URL
API_URL = "http://api:8000" if os.environ.get("DOCKER_ENV") else "http://localhost:8000"

def get_api_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health
        health_response = requests.get(f"{API_URL}/health", timeout=10)
        health_data = health_response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º model-info
        model_response = requests.get(f"{API_URL}/model-info", timeout=10)
        model_data = model_response.json()
        
        status_text = "‚úÖ **API –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç**\n\n"
        status_text += f"**Health Status:** {health_data.get('status', 'unknown')}\n"
        status_text += f"**–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞:** {health_data.get('model_loaded', False)}\n"
        status_text += f"**Torch –≤–µ—Ä—Å–∏—è:** {health_data.get('torch_version', 'unknown')}\n"
        status_text += f"**CUDA –¥–æ—Å—Ç—É–ø–Ω–∞:** {health_data.get('cuda_available', False)}\n"
        status_text += f"**GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤:** {health_data.get('device_count', 0)}\n\n"
        
        if 'model_info' in health_data and health_data['model_info']:
            info = health_data['model_info']
            status_text += "**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:**\n"
            status_text += f"- –ö–ª–∞—Å—Å –º–æ–¥–µ–ª–∏: {info.get('model_class', 'unknown')}\n"
            status_text += f"- –ö–ª–∞—Å—Å —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞: {info.get('tokenizer_class', 'unknown')}\n"
            status_text += f"- –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {info.get('device', 'unknown')}\n"
            status_text += f"- –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {info.get('dtype', 'unknown')}\n"
            status_text += f"- –ò–º—è –º–æ–¥–µ–ª–∏: {info.get('model_name', 'unknown')}\n"
        
        if 'error' in health_data:
            status_text += f"\n‚ö†Ô∏è **–û—à–∏–±–∫–∞:** {health_data['error']}\n"
        
        return status_text
        
    except requests.exceptions.ConnectionError:
        return f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –ø–æ –∞–¥—Ä–µ—Å—É {API_URL}\nüîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"

def test_model_loading():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ API"""
    try:
        response = requests.get(f"{API_URL}/test-model", timeout=30)
        if response.status_code == 200:
            data = response.json()
            if data.get('test_passed'):
                return "‚úÖ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!"
            else:
                return f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}"
    except requests.exceptions.ConnectionError:
        return f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –ø–æ –∞–¥—Ä–µ—Å—É {API_URL}\nüîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"

def generate_text(prompt, system_prompt="–í—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã."):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ API"""
    if not prompt.strip():
        return "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
    
    logger.info(f"üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è: {prompt[:50]}...")
    
    try:
        logger.info("üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API...")
        
        response = requests.post(
            f"{API_URL}/generate", 
            json={
                "text": prompt,
                "system_prompt": system_prompt
            },
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            logger.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return f"ü§ñ **–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:** {result['response']}\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n- –î–ª–∏–Ω–∞ –≤—Ö–æ–¥–∞: {result.get('input_length', 'unknown')}\n- –î–ª–∏–Ω–∞ –≤—ã—Ö–æ–¥–∞: {result.get('output_length', 'unknown')}"
        else:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}"
            try:
                error_detail = response.json()
                error_msg += f"\nüìã –î–µ—Ç–∞–ª–∏: {error_detail.get('detail', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')}"
            except:
                error_msg += f"\nüìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:200]}..."
            return error_msg
            
    except requests.exceptions.Timeout:
        return "‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API (–≤–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è)"
    except requests.exceptions.ConnectionError:
        return f"üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –ø–æ –∞–¥—Ä–µ—Å—É {API_URL}\nüîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API: {str(e)}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {str(e)}\n\nüìã –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()[:500]}..."

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
with gr.Blocks(title="Qwen2.5-0.5B Chat UI", theme=gr.themes.Soft()) as demo:
    gr.Markdown("# ü§ñ Qwen2.5-0.5B Chat UI")
    gr.Markdown("–ß–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é Qwen2.5-0.5B-Instruct")
    
    with gr.Tab("üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç"):
        with gr.Row():
            with gr.Column(scale=3):
                text_input = gr.Textbox(
                    lines=3, 
                    label="–í–∞—à –≤–æ–ø—Ä–æ—Å", 
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∑–¥–µ—Å—å...",
                    value="–†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–æ—Å–º–æ—Å–µ"
                )
                system_prompt_text = gr.Textbox(
                    lines=2,
                    label="–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                    value="–í—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–ø–æ—Å–æ–±–Ω—ã–π –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.",
                    placeholder="–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."
                )
                with gr.Row():
                    text_submit_btn = gr.Button("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", variant="primary")
                    clear_btn = gr.Button("üßπ –û—á–∏—Å—Ç–∏—Ç—å", variant="secondary")
            
            with gr.Column(scale=3):
                text_output = gr.Textbox(
                    lines=10, 
                    label="–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏", 
                    interactive=False
                )
    
    with gr.Tab("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"):
        with gr.Row():
            with gr.Column():
                status_btn = gr.Button("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å API", variant="primary")
                test_btn = gr.Button("üß™ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏", variant="secondary")
                
            with gr.Column():
                status_output = gr.Textbox(
                    lines=15,
                    label="–°—Ç–∞—Ç—É—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
                    interactive=False
                )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
    with gr.Accordion("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø–æ–º–æ—â—å", open=False):
        gr.Markdown("""
        ### ü§ñ –û –º–æ–¥–µ–ª–∏
        - **–ú–æ–¥–µ–ª—å**: Qwen2.5-0.5B-Instruct (494M –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
        - **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏**: –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö
        - **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞**: Transformer-based –º–æ–¥–µ–ª—å –æ—Ç Alibaba Cloud
        
        ### üõ† –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        - **–°—Ç–∞—Ç—É—Å API**: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API –∏ –º–æ–¥–µ–ª–∏
        - **–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏**: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
        - **–î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏**: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        
        ### üö® –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000
        - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
        - –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è
        
        ### üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        - [API Docs](http://localhost:8000/docs)
        - [Health Check](http://localhost:8000/health)
        - [Model Info](http://localhost:8000/model-info)
        """)
    
    # –°–≤—è–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    text_submit_btn.click(
        fn=generate_text,
        inputs=[text_input, system_prompt_text],
        outputs=text_output
    )
    
    clear_btn.click(
        fn=lambda: ("", ""),
        inputs=[],
        outputs=[text_input, text_output]
    )
    
    status_btn.click(
        fn=get_api_status,
        inputs=[],
        outputs=status_output
    )
    
    test_btn.click(
        fn=test_model_loading,
        inputs=[],
        outputs=status_output
    )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    text_input.submit(
        fn=generate_text,
        inputs=[text_input, system_prompt_text],
        outputs=text_output
    )

# –ó–∞–ø—É—Å–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ Docker
if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ UI...")
    demo.launch(
        server_name="0.0.0.0", 
        server_port=7860, 
        share=False,
        show_error=True
    )
